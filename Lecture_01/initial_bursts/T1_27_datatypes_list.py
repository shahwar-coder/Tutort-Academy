'''
ðŸ”¹ Python `list` Type

- A `list` in Python is an **ordered**, **mutable** collection of elements.
- Lists can hold items of **any data type**, and even a mix of types.
- Lists are **indexed (0-based)**, **iterable**, and **dynamic** (size can change).

ðŸ”¸ Creation:
    my_list = [1, 2, 3]
    mixed = [1, "hello", 3.14, True]
    nested = [[1, 2], [3, 4]]
    empty = []

ðŸ”¸ Accessing Elements:
    my_list[0]       â†’ First element
    my_list[-1]      â†’ Last element
    my_list[1:3]     â†’ Slicing (elements at index 1 and 2)

ðŸ”¸ Mutability:
    my_list[1] = 10  â†’ Lists are mutable; elements can be changed

ðŸ”¸ Common Methods:
- `.append(x)`          â†’ Add item at end
- `.extend([a, b])`     â†’ Add multiple items
- `.insert(i, x)`       â†’ Insert at position `i`
- `.remove(x)`          â†’ Remove first occurrence of `x`
- `.pop([i])`           â†’ Remove & return item at `i` (default: last)
- `.clear()`            â†’ Remove all items
- `.index(x)`           â†’ First index of `x`
- `.count(x)`           â†’ Count occurrences of `x`
- `.sort()`             â†’ In-place ascending sort
- `.reverse()`          â†’ Reverse list in-place
- `sorted(list)`        â†’ Returns sorted copy
- `len(list)`           â†’ Number of items

ðŸ”¸ Iteration:
    for item in my_list:
        print(item)

ðŸ”¸ List Comprehension:
    squares = [x**2 for x in range(5)]
    evens = [x for x in range(10) if x % 2 == 0]

ðŸ”¸ Nesting:
    matrix = [[1,2,3],[4,5,6]]
    matrix[1][2] â†’ 6

ðŸ”¸ Memory & Identity:
- Lists are **mutable**, so assignment copies the reference:
    a = [1, 2]
    b = a
    b[0] = 99  â†’ Now `a[0]` is also 99

- Use `copy()` or `list()` for a shallow copy:
    b = a.copy() or b = list(a)

ðŸ”¸ Checking Membership:
    x in my_list       â†’ True if `x` exists in list

ðŸ”¸ Heterogeneous:
    A list can store elements of different types:
    [1, "hi", None, [3, 4]]

ðŸ”¸ Dynamic Sizing:
    List size can grow or shrink with `append`, `pop`, etc.

ðŸ”¸ Caution:
- Avoid modifying a list while iterating over it (use `.copy()` if needed)
'''

